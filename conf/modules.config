/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*|MAKE_TRANSCRIPTS_FASTA' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES|HISAT2_BUILD' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }


    withName: 'CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_merged_fastq
        ]
    }
}


//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: 'FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
            ext.args   = {
                [
                    "--fastqc_args '-t ${task.cpus}' ",
                    params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
                ].join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }


    }
}
if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: 'FASTQ_FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
            ext.args   = [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : ''
                ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.log"
                ],
                [
                    path: { "${params.outdir}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz",
                    enabled: params.save_umi_intermeds
                ]
            ]
        }
    }
}



//
// General alignment options
//

if (!params.skip_alignment) {
    process {
        withName: 'BAM_STATS_SAMTOOLS' {
            ext.prefix = { "${meta.id}.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: ( ['star_salmon','hisat2'].contains(params.aligner) &&
                    ( params.save_align_intermeds ||
                        ( !params.with_umi && params.skip_markduplicates )
                    )
                ) || params.save_align_intermeds || params.skip_markduplicates
            ]
        }

        withName: 'SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,csi}",
                enabled: ( ['star_salmon','hisat2'].contains(params.aligner) &&
                    ( params.save_align_intermeds ||
                        ( !params.with_umi && params.skip_markduplicates )
                    )
                ) || params.save_align_intermeds || params.skip_markduplicates
            ]
        }
    }
}











//
//  Process options for the SRA workflow
//
if (params.input_type == 'sra') {

    process {

        withName: SRA_IDS_TO_RUNINFO {
            publishDir = [
                path: { "${params.outdir}/metadata" },
                enabled: false
            ]
        }

        withName: SRA_RUNINFO_TO_FTP {
            publishDir = [
                path: { "${params.outdir}/metadata" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: SRA_FASTQ_FTP {
            ext.args = '--retry 5 --continue-at - --max-time 1200'
            publishDir = [
                [
                    path: { "${params.outdir}/fastq" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fastq.gz"
                ],
                [
                    path: { "${params.outdir}/fastq/md5" },
                    mode: params.publish_dir_mode,
                    pattern: "*.md5"
                ]
            ]
        }

        withName: SRATOOLS_PREFETCH {
            publishDir = [
                path: { "${params.outdir}/sra" },
                enabled: false
            ]
        }

        withName: SRATOOLS_FASTERQDUMP {
            publishDir = [
                path: { "${params.outdir}/fastq" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz"
            ]
        }

        withName: SRA_TO_SAMPLESHEET {
            publishDir = [
                path: { "${params.outdir}/samplesheet" },
                enabled: false
            ]
        }

        withName: SRA_MERGE_SAMPLESHEET {
            publishDir = [
                path: { "${params.outdir}/samplesheet" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: MULTIQC_MAPPINGS_CONFIG {
            publishDir = [
                path: { "${params.outdir}/samplesheet" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

    }

}


process {


    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

}





// POST ALIGNMENT AND PREPROCESSING BAM

process {

    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = {"${meta.id}.aligned"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:ALIGN_STAR:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = {"${meta.id}.aligned"}
        publishDir = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bai,csi}",
            enabled: params.save_align_intermeds
        ]
    }

    withName: '.*:MARKDUPLICATES:SAMTOOLS_INDEX' {
        ext.args    = params.bam_csi_index ? '-c' : ''
        ext.prefix  = {"${meta.id}.markdup.sorted"}
        publishDir  = [
            path: { "${params.outdir}/preprocessing/${meta.id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            pattern: "*.{bai,csi}"
        ]
    }


    withName: 'SAMTOOLS_STATS|SAMTOOLS_FLAGSTAT|SAMTOOLS_IDXSTATS' {
            publishDir  = [
                path: { "${params.outdir}/reports/stats/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: !params.skip_multiqc,
                pattern: "*.{stats,flagstat}"
            ]
    }

}


